go.property("test_url", msg.url())

local DISPLAY_WIDTH = sys.get_config_int("display.width")
local DISPLAY_HEIGHT = sys.get_config_int("display.height")

--- Adjust camera zoom so that the original area covered by
-- display width and height of game.project is always visible
local function fixed_fit_projection(global_zoom)
    local w, h = window.get_size()
    local scale = window.get_display_scale()
    local zoom = global_zoom * math.min(w / scale / DISPLAY_WIDTH, h / scale / DISPLAY_HEIGHT)
    go.set("/camera#camera", "orthographic_zoom", zoom)
end

function init(self)
    msg.post("@render:", "clear_color", { color = vmath.vector4(0.8, 0.8, 0.8, 1) })
    msg.post(".", "acquire_input_focus")

    local hinge_props = { enable_motor = true, enable_limit = false, max_motor_torque = 3000, motor_speed = 0.1 * math.pi}
    physics.create_joint(physics.JOINT_TYPE_HINGE, "/level#collisionobject", "pinpoint", vmath.vector3(768/2, 640/2, 0), "/pinpoint#collisionobject", vmath.vector3(0), hinge_props)

    for i = 1, 20 do
        local angle = math.random() * math.pi * 2
        local x = math.cos(angle) * 50
        local y = math.sin(angle) * 50
        collectionfactory.create("#test_object", go.get_position("/pinpoint") + vmath.vector3(x, y, 0))
    end
end

function update(self, dt)
    fixed_fit_projection(0.6)
end

function fixed_update(self, dt)
end

function on_input(self, action_id, action)
    if action_id == hash("key_space") and action.pressed then
        object_interpolation.set_enabled(not object_interpolation.is_enabled())
    end
end
